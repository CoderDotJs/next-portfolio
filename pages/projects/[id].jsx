import React from "react";
import { Swiper, SwiperSlide } from "swiper/react";
import SwiperCore, { Pagination, EffectCoverflow } from "swiper";
import Navigation from "../../components/Navigation/Index";
import Image from "next/image";
import { useRouter } from "next/router";
import projects from "../../assets/works.json";
import Link from "next/link";
import styles from "../../styles/ProjectDetails.module.css";
import Head from "next/head";

SwiperCore.use([EffectCoverflow, Pagination]);

const ProjectDetail = () => {
  const router = useRouter();
  const { id } = router.query;

  const fillterProject = projects.filter(
    (project) => project.id === parseInt(id)
  );

  return (
    <>
      <Head>
        <title>
          {fillterProject.map((name) => {
            return name.name;
          })}
        </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Navigation />
      <div className={styles.project_detail}>
        <Link href="/#projects">
          <span
            className={`${styles.highlight} ${styles.nav_links}`}
          >{`< back`}</span>
        </Link>
        {fillterProject.map((project) => {
          return (
            <div key={project.id}>
              <h1 className={styles.project_name}>{project.name}</h1>
              <h3 className={styles.project_stack}>
                Technologies: {project.techStack}
              </h3>
              {project.img ? (
                <Swiper
                  effect={"coverflow"}
                  grabCursor={true}
                  centeredSlides={true}
                  slidesPerView={"auto"}
                  coverflowEffect={{
                    rotate: 50,
                    stretch: 0,
                    depth: 100,
                    modifier: 1,
                    slideShadows: true,
                  }}
                  pagination={true}
                  className="mySwiper"
                >
                  {project.img.map((img) => {
                    return (
                      <SwiperSlide key={img}>
                        <Image
                          src={img}
                          alt="img"
                          width="1280px"
                          height="587px"
                          // layout="responsive"
                          clssName={styles.project_img}
                        />
                      </SwiperSlide>
                    );
                  })}
                </Swiper>
              ) : (
                <h3 className={styles.project_stack} style={{}}>
                  No Image Found !!!
                </h3>
              )}
              <p className={styles.project_desc}>{project.desc}</p>
              <div className={styles.project_buttons}>
                <a
                  href={project?.link}
                  className={styles.btn}
                  target="_blank"
                  rel="noreferrer"
                >
                  <i
                    className={`fab fa-github banner ${styles.github}`}
                    style={{ color: "rgb(100, 255, 218)" }}
                  >
                    {" "}
                  </i>{" "}
                  Github Client
                </a>
                {project.server && (
                  <a
                    href={project?.server}
                    className={styles.btn}
                    target="_blank"
                    rel="noreferrer"
                  >
                    <i className={`fas fa-server ${styles.server}`}></i> Github
                    Server
                  </a>
                )}
                <a
                  href={project?.open}
                  className={styles.btn}
                  target="_blank"
                  rel="noreferrer"
                >
                  <i className={`fas fa-file ${styles.file}`}></i> Live Link
                </a>
              </div>
            </div>
          );
        })}
      </div>
    </>
  );
};

export default ProjectDetail;
